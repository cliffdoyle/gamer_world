#!/bin/bash

# Colors for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${GREEN}=== Gamer World Environment Setup ===${NC}"
echo ""

# Create .env.local for the frontend if it doesn't exist
if [ ! -f tournament-frontend/.env.local ]; then
    echo -e "${YELLOW}Creating tournament-frontend/.env.local file...${NC}"
    
    # Prompt for Google Client ID
    echo -e "Enter your ${GREEN}Google OAuth Client ID${NC} (from Google Cloud Console):"
    read google_client_id
    
    # Prompt for user service URL
    echo -e "Enter your ${GREEN}User Service URL${NC} (default: http://localhost:8081):"
    read user_service_url
    user_service_url=${user_service_url:-http://localhost:8081}
    
    # Create the file
    cat > tournament-frontend/.env.local << EOF
# Generated by setup-env.sh
NEXT_PUBLIC_GOOGLE_CLIENT_ID=${google_client_id}
NEXT_PUBLIC_USER_SERVICE_URL=${user_service_url}
EOF
    
    echo -e "${GREEN}Frontend environment file created successfully!${NC}"
else
    echo -e "${YELLOW}tournament-frontend/.env.local already exists. Skipping...${NC}"
    echo "If you want to recreate it, please delete the file first."
fi

# Create .env file for the backend if it doesn't exist
if [ ! -f user-service/.env ]; then
    echo -e "${YELLOW}Creating user-service/.env file...${NC}"
    
    # Only prompt for Google Client ID if not already done
    if [ -z "$google_client_id" ]; then
        echo -e "Enter your ${GREEN}Google OAuth Client ID${NC} (from Google Cloud Console):"
        read google_client_id
    fi
    
    # Prompt for JWT Secret
    echo -e "Enter your ${GREEN}JWT Secret${NC} (leave empty for auto-generated):"
    read jwt_secret
    
    # Generate a JWT secret if not provided
    if [ -z "$jwt_secret" ]; then
        jwt_secret=$(openssl rand -base64 32)
        echo -e "Generated JWT Secret: ${YELLOW}$jwt_secret${NC}"
    fi
    
    # Prompt for database URL
    echo -e "Enter your ${GREEN}PostgreSQL Database URL${NC} (default: postgres://postgres:postgres@localhost:5432/gamerworld):"
    read db_url
    db_url=${db_url:-postgres://postgres:postgres@localhost:5432/gamerworld}
    
    # Create the file
    cat > user-service/.env << EOF
# Generated by setup-env.sh
GOOGLE_CLIENT_ID=${google_client_id}
JWT_SECRET=${jwt_secret}
DATABASE_URL=${db_url}
EOF
    
    echo -e "${GREEN}Backend environment file created successfully!${NC}"
    
    # Create a helper script to load these environment variables
    cat > user-service/load-env.sh << EOF
#!/bin/bash
# Generated by setup-env.sh
export GOOGLE_CLIENT_ID=${google_client_id}
export JWT_SECRET=${jwt_secret}
export DATABASE_URL=${db_url}

echo "Environment variables loaded. You can now run the user service."
EOF
    
    chmod +x user-service/load-env.sh
    echo -e "Created ${GREEN}user-service/load-env.sh${NC} helper script"
    echo -e "Run ${YELLOW}source user-service/load-env.sh${NC} before starting the backend"
else
    echo -e "${YELLOW}user-service/.env already exists. Skipping...${NC}"
    echo "If you want to recreate it, please delete the file first."
fi

echo ""
echo -e "${GREEN}Setup complete!${NC}"
echo -e "${YELLOW}IMPORTANT:${NC} Make sure both frontend and backend use the ${RED}SAME${NC} Google Client ID"
echo "Read README-GOOGLE-AUTH.md for more details on setting up Google OAuth correctly" 